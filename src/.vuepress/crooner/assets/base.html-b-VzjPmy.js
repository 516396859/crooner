import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,a as i,d as n}from"./app-BzF0xui3.js";const t={},s=n('<h3 id="_1-java-语言有哪些特点" tabindex="-1"><a class="header-anchor" href="#_1-java-语言有哪些特点"><span>1. Java 语言有哪些特点？</span></a></h3><ul><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>编译与解释并存；支持多线程；</li></ul><h3 id="_2-jvm-vs-jdk-vs-jre-三者的区别" tabindex="-1"><a class="header-anchor" href="#_2-jvm-vs-jdk-vs-jre-三者的区别"><span>2. JVM vs JDK vs JRE 三者的区别？</span></a></h3><ul><li>JVM：Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现。</li><li>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</li><li>JDK（Java Development Kit）,包含JRE、编译器javac、javadoc等工具。提供给开发者使用。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Tips: JDK = JRE + 开发工具 ；JRE = JVM + Java SE API 类库 ；</p></div><h3 id="_3-什么是字节码-字节码的好处是" tabindex="-1"><a class="header-anchor" href="#_3-什么是字节码-字节码的好处是"><span>3. 什么是字节码？字节码的好处是？</span></a></h3><ul><li>被JVM解释执行的.class文件，即.java文件编译后的文件。</li><li>字节码的好处是：实现了一次编译，到处运行，屏蔽了底层操作系统的差异，实现了跨平台。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>代码执行的过程可以理解为：.java源码 ---编译---&gt; .class字节码 ---解释执行---&gt; 机器码 ，解释执行的速度比编译执行（C++编译执行）慢，因此对于一些经常被调用的代码JVM使用JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用，来提高执行效率。</p></div><h3 id="_4-为什么说-java-语言-编译与解释并存" tabindex="-1"><a class="header-anchor" href="#_4-为什么说-java-语言-编译与解释并存"><span>4. 为什么说 Java 语言“编译与解释并存”？</span></a></h3><ul><li>.java 源代码先编译成 .class 字节码，而字节码是通过 JVM 解释成二进制机器码执行的，这种方式既保留了解释执行的特点，又提高了执行效率。</li><li>部分高频执行的热代码会使用 JIT 编译器将字节码编译成机器码，提高执行效率。</li></ul><h3 id="_5-基本移位运算符了解码" tabindex="-1"><a class="header-anchor" href="#_5-基本移位运算符了解码"><span>5. 基本移位运算符了解码？</span></a></h3><ul><li><code>&lt;&lt;</code> : 左移运算符，向左移若干位，高位丢弃，低位补零。x &lt;&lt; 1,相当于 x 乘以 2(不溢出的情况下)。</li><li><code>&gt;&gt;</code> : 忽略符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。x &gt;&gt; 1,相当于 x 除以 2。</li><li><code>&gt;&gt;&gt;</code> : 带符号右移，例如 -2&gt;&gt;&gt;1 答案不是 -1 而是 2147483647，空位都以 0 补齐。</li></ul><h3 id="_6-基本类型和包装类型的区别" tabindex="-1"><a class="header-anchor" href="#_6-基本类型和包装类型的区别"><span>6. 基本类型和包装类型的区别？</span></a></h3><ul><li><strong>占用空间</strong>： 基本类型占用空间小，包装类型占用空间大。</li><li><strong>默认值</strong>： 基本类型有默认值，包装类型默认值为 null。</li><li><strong>存储方式</strong>： 包装类型存储在堆中，基本数据类型如果是成员变量则存储在堆中，如果是局部变量则存储在栈中。如果使用static修饰的基本数据类型存储在方法区中。</li><li><strong>比较方式</strong>： 使用 == 号基本类型比较的是值，包装类型比较的是地址。对于包装类型使用equals方法比较的是值。</li></ul><h3 id="_7-为什么浮点数运算的时候会有精度丢失的风险" tabindex="-1"><a class="header-anchor" href="#_7-为什么浮点数运算的时候会有精度丢失的风险"><span>7. 为什么浮点数运算的时候会有精度丢失的风险？</span></a></h3><p>因为计算机是二进制机器，二机制机器天然擅长表达整数数据类型，如果需要表达浮点数那么需要更长的位数来表示，而表示一个浮点数的数据类型的位数是有限的，而一个小数可以是无限的，因此需要进行截断从而导致精度丢失。因此，一些浮点数没有办法用二进制精确表示，就比如说十进制下的 0.2 就没办法精确转换成二进制小数：0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止。</p><h3 id="_8-如何解决浮点数运算的精度丢失问题" tabindex="-1"><a class="header-anchor" href="#_8-如何解决浮点数运算的精度丢失问题"><span>8. 如何解决浮点数运算的精度丢失问题？</span></a></h3><p>使用 BigDecimal 类进行运算，BigDecimal 类提供了精确的数学运算，可以解决浮点数运算的精度丢失问题。BigDecimal 的实现利用到了 BigInteger （用来操作大整数）, 所不同的是 BigDecimal 加入了小数位的概念。BigInteger 内部使用 int[] 数组来存储任意大小的整形数据。</p><ul><li>BigDecimal类型的变量比较大小使用compareTo()方法，equals() 方法不仅仅会比较值的大小（value）还会比较精度（scale），而 compareTo() 方法比较的时候会忽略精度。</li><li>在一些情景下也可以使用long或者double类型，但是需要注意下面精度问题。对于浮点数而言，基本数据类型不能使用==比较大小，包装类型不能使用equals()比较大小，而是指定一个误差范围；或者直接使用BigDecimal。</li></ul><h3 id="_9-超过long类型的数据如何存储" tabindex="-1"><a class="header-anchor" href="#_9-超过long类型的数据如何存储"><span>9. 超过Long类型的数据如何存储？</span></a></h3><p>使用BigInteget存储；BigInteger 内部使用 int[] 数组来存储任意大小的整形数据。</p><h3 id="_10" tabindex="-1"><a class="header-anchor" href="#_10"><span>10.</span></a></h3><h3 id="_11" tabindex="-1"><a class="header-anchor" href="#_11"><span>11.</span></a></h3><h3 id="_12" tabindex="-1"><a class="header-anchor" href="#_12"><span>12.</span></a></h3><h3 id="_13" tabindex="-1"><a class="header-anchor" href="#_13"><span>13.</span></a></h3><h3 id="_14" tabindex="-1"><a class="header-anchor" href="#_14"><span>14.</span></a></h3><h3 id="_15" tabindex="-1"><a class="header-anchor" href="#_15"><span>15.</span></a></h3><h3 id="_16" tabindex="-1"><a class="header-anchor" href="#_16"><span>16.</span></a></h3><h3 id="_17" tabindex="-1"><a class="header-anchor" href="#_17"><span>17.</span></a></h3><h3 id="_18" tabindex="-1"><a class="header-anchor" href="#_18"><span>18.</span></a></h3><h3 id="_19" tabindex="-1"><a class="header-anchor" href="#_19"><span>19.</span></a></h3><h3 id="_20" tabindex="-1"><a class="header-anchor" href="#_20"><span>20.</span></a></h3><h3 id="_21" tabindex="-1"><a class="header-anchor" href="#_21"><span>21.</span></a></h3><h3 id="_22" tabindex="-1"><a class="header-anchor" href="#_22"><span>22.</span></a></h3>',34);function r(h,c){return e(),l("div",null,[i(` <div>
    <h3>1. Java 语言有哪些特点？</h3>
    <div style="border-radius:20px;background-color:#F0FFF0;padding:1px">
        
    </div>
</div> `),s])}const p=a(t,[["render",r],["__file","base.html.vue"]]),v=JSON.parse('{"path":"/baguwen/java/base.html","title":"Java 基础","lang":"zh-CN","frontmatter":{"title":"Java 基础","icon":"file","author":"Cheney","date":"2024-04-10T00:00:00.000Z","isOriginal":true,"category":"Java","description":"1. Java 语言有哪些特点？ 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 编译与解释并存；支持多线程； 2. JVM vs JDK vs JRE 三者的区别？ JVM：Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现。 JRE（Java Runtime Environ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/baguwen/java/base.html"}],["meta",{"property":"og:site_name","content":"歌者笔记（Crooner Note）"}],["meta",{"property":"og:title","content":"Java 基础"}],["meta",{"property":"og:description","content":"1. Java 语言有哪些特点？ 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 编译与解释并存；支持多线程； 2. JVM vs JDK vs JRE 三者的区别？ JVM：Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现。 JRE（Java Runtime Environ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cheney"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cheney\\"}]}"]]},"headers":[{"level":3,"title":"1. Java 语言有哪些特点？","slug":"_1-java-语言有哪些特点","link":"#_1-java-语言有哪些特点","children":[]},{"level":3,"title":"2. JVM vs JDK vs JRE 三者的区别？","slug":"_2-jvm-vs-jdk-vs-jre-三者的区别","link":"#_2-jvm-vs-jdk-vs-jre-三者的区别","children":[]},{"level":3,"title":"3. 什么是字节码？字节码的好处是？","slug":"_3-什么是字节码-字节码的好处是","link":"#_3-什么是字节码-字节码的好处是","children":[]},{"level":3,"title":"4. 为什么说 Java 语言“编译与解释并存”？","slug":"_4-为什么说-java-语言-编译与解释并存","link":"#_4-为什么说-java-语言-编译与解释并存","children":[]},{"level":3,"title":"5. 基本移位运算符了解码？","slug":"_5-基本移位运算符了解码","link":"#_5-基本移位运算符了解码","children":[]},{"level":3,"title":"6. 基本类型和包装类型的区别？","slug":"_6-基本类型和包装类型的区别","link":"#_6-基本类型和包装类型的区别","children":[]},{"level":3,"title":"7. 为什么浮点数运算的时候会有精度丢失的风险？","slug":"_7-为什么浮点数运算的时候会有精度丢失的风险","link":"#_7-为什么浮点数运算的时候会有精度丢失的风险","children":[]},{"level":3,"title":"8. 如何解决浮点数运算的精度丢失问题？","slug":"_8-如何解决浮点数运算的精度丢失问题","link":"#_8-如何解决浮点数运算的精度丢失问题","children":[]},{"level":3,"title":"9. 超过Long类型的数据如何存储？","slug":"_9-超过long类型的数据如何存储","link":"#_9-超过long类型的数据如何存储","children":[]},{"level":3,"title":"10.","slug":"_10","link":"#_10","children":[]},{"level":3,"title":"11.","slug":"_11","link":"#_11","children":[]},{"level":3,"title":"12.","slug":"_12","link":"#_12","children":[]},{"level":3,"title":"13.","slug":"_13","link":"#_13","children":[]},{"level":3,"title":"14.","slug":"_14","link":"#_14","children":[]},{"level":3,"title":"15.","slug":"_15","link":"#_15","children":[]},{"level":3,"title":"16.","slug":"_16","link":"#_16","children":[]},{"level":3,"title":"17.","slug":"_17","link":"#_17","children":[]},{"level":3,"title":"18.","slug":"_18","link":"#_18","children":[]},{"level":3,"title":"19.","slug":"_19","link":"#_19","children":[]},{"level":3,"title":"20.","slug":"_20","link":"#_20","children":[]},{"level":3,"title":"21.","slug":"_21","link":"#_21","children":[]},{"level":3,"title":"22.","slug":"_22","link":"#_22","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.18,"words":1255},"filePathRelative":"baguwen/java/base.md","localizedDate":"2024年4月10日","autoDesc":true}');export{p as comp,v as data};
